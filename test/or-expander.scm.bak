

;; or expander

;; pattern matching language
;; (or) #f
;; (or #t) #t
;; (or #f) #f
;; (or #t #f) #t
;; (or #t #t) #t ...

;; mit-scheme
;; a.k.a gensym....


(define f 123)
(define f2 "happy go lucky")

;; blocked f f2 expr assignments from escaping?
;; see if returning 
(define or-expander
  ((lambda (f f2 expr)
     (begin

       ;; (or p1 p2 p3 p4 p5 ...)
       (define f 0)
       (define f2 0)
       (set! f (lambda (ex) ; strip OR , now only dealing with (p1 p2 p3 p4) problems
		 (begin
		   (f2 (cdr ex)))))
       
       ;;(X Y1 Y2 Y3 ..)
       ;; caar = X
       ;; cdar = Y1 Y2 Y3
       (set! f2 (lambda (ex)
		  (if (null? ex)
		      #f
		      (if (null? (cdr ex))
			  (car ex)
			  (let ((tmp (genny)))
			    (list 'let (list (list tmp (car ex) ))
				  (list 'if tmp tmp (f2 (cdr ex)))))))))
       
       ;; target
       ;;
       ;; (let* ((a 1 2 3)(b 4 5 6)(c 7 8 9))
       ;;   (display "yes")
       ;;   (close-files)
       ;;   (jump))
       ;; =>
       ;; (let ((a 1 2 3))
       ;;   (let ((b 4 5 6))
       ;;     (let ((c 7 8 9))
       ;;       ...body...)))
       f)) 0 0 0))

;;-------------------------------------------------------------
;; let removed -> lambda
;; depends on (genny) ... gensym feature missing from mit-scheme ....
(define or-expander
  ((lambda (f f2 expr)
     (begin
      (define f
        0)
      (define f2
        0)
      (set! f (lambda (ex) (begin (f2 (cdr ex)))))
      (set!
       f2
       (lambda (ex)
         (if (null? ex)
             #f
             (if (null? (cdr ex))
                 (car ex)
                 ((lambda (tmp)
                    (begin (list 'let (list (list tmp (car ex))) (list 'if tmp tmp (f2 (cdr ex))))))
                  (begin (genny)))))))
      f))
   0
   0
   0))
;; -------------------------------------------------------------------

 
(or-expander '(or))
(or-expander '(or #t))
(or-expander '(or #f))
(or-expander '(or #t #t))
(or-expander '(or #t #f))
(or-expander '(or #t #t))
(or-expander '(or #f #f))
(or-expander '(or #f #f #t))
(or-expander '(or #f #f #f))
(or-expander '(or #f #f #f #t))
(or-expander '(or #f #f #f #f))

f
f2

(define f 321)
(define f2 "lucky so far!")
(define expr "something random")

"lets see if OR expander still works now changed f f2 expr"
 
(or-expander '(or))
(or-expander '(or #t))
(or-expander '(or #f))
(or-expander '(or #t #t))
(or-expander '(or #t #f))
(or-expander '(or #t #t))
(or-expander '(or #f #f))
(or-expander '(or #f #f #t))
(or-expander '(or #f #f #f))
(or-expander '(or #f #f #f #t))
(or-expander '(or #f #f #f #f))

(or-expander '(or 1 2 3 4 5 6))
(or-expander '(or (begin 1 2 3) (begin 4 5 6) (begin 7 8 9) (begin 10 11 12)))

(or-expander '(or))

(or-expander '(or (begin 1 2 3)))

(or-expander '(or (begin 1 2 3) (or (begin 4 5 6) (begin 7 8 9)) (begin 10 11 12)))


(or)
(or #t)
(or #f)
(or #t #t)
(or #t #f)
(or #t #t)
(or #f #f)
(or #f #f #t)
(or #f #f #f)
(or #f #f #f #t)
(or #f #f #f #f)
(or 1 2 3 4 5 6)
(or (begin 1 2 3) (begin 4 5 6) (begin 7 8 9) (begin 10 11 12))
(or)
(or (begin 1 2 3))
(or (begin 1 2 3) (or (begin 4 5 6) (begin 7 8 9)) (begin 10 11 12))


